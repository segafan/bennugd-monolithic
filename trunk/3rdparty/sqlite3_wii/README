---------------
SQLite Wii Port
---------------

This is a very primitive port of SQL Lite 3.6.11.  By primitive I mean that I've 
hacked at the Unix code to get it to compile (albeit with many warnings) for the
Wii. Check the Makefile to see what's been ommitted. The main ommission would be
the threading and mutex code, making the database unsuited for access by several
threads. All source modifications are marked with the SQLITE_OS_LIBOGC define.

Despite the limitations, it all works just fine.  WiiMP uses the library to sort 
and search 8500+ records for my music collection without breaking a sweat.

NOTE: When opening a database, you must use the full path to the requested file,
including device prefix. See sqlite3.c function unixFullPathname if you want to
improve this.

Here's a small example to create a database file, create a single table with 
two colums, and insert the text "SQLite Wii Port" into the second column. Refer
to http://www.sqlite.org/quickstart.html for more detailed documentation.

/******************************************************************************/
#include <sqlite3.h>

/* The database file we want to create */
#define DB_FILE "sd:/apps/app_name/database.db"

/* The global database object to work with */
sqlite3 *db;

void DB_OpenCreate(void) {
	int result = 0;

	/* OPTIONAL: Set a temporary working directory for SQLite to use. */
	sqlite3_temp_directory = "sd:/apps/app_name/temp/";

	result = sqlite3_open_v2(DB_FILE, &db, SQLITE_OPEN_CREATE, "unix-none");
	if (result != SQLITE_OK) {
		printf("%s:%s\n", __FUNCTION__, sqlite3_errmsg(db));
		exit(EXIT_FAILURE);
	}
}

void DB_CreateTable(void) {
	char *errorMsg = NULL;
	int result = 0;

	result = sqlite3_exec(db, "CREATE TABLE IF NOT EXISTS test 
			(id INTEGER PRIMARY KEY, string TEXT);", NULL, 0, &errorMsg);
	if (result != SQLITE_OK) {
		printf("%s:%s\n", __FUNCTION__, errorMsg);
		sqlite3_free(errorMsg);
		exit(EXIT_FAILURE);
	}
}

void DB_InsertString(void) {
	char *errorMsg = NULL;
	int result = 0;

	result = sqlite3_exec(db, "INSERT INTO test (string) VALUES 
			(\"SQLite Wii Port\");", NULL, 0, &errorMsg);
	if (result != SQLITE_OK) {
		printf("%s:%s\n", __FUNCTION__, errorMsg);
		sqlite3_free(errorMsg);
		exit(EXIT_FAILURE);
	}
}

void DB_Close(void) {
	sqlite3_close(db);
}

int main(void) {
	DB_OpenCreate();
	DB_CreateTable();
	DB_InsertString();
	DB_Close();

	return 0;
}
/******************************************************************************/


----
DrTwox (drtwox AT gmail DOT com)
http://code.google.com/p/wiimp/
