#---------------------------------------------------------------------------------
# Clear the implicit built in rules
#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------
ifeq ($(strip $(DEVKITPPC)),)
$(error "Please set DEVKITPPC in your environment. export DEVKITPPC=<path to>devkitPPC")
endif

include $(DEVKITPPC)/wii_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# INCLUDES is a list of directories containing extra header files
#---------------------------------------------------------------------------------
TARGET		:=	bgdi
BUILD		:=	build_wii
SOURCES		:=	build_wii/src
DATA		:=
TEXTURES	:=	
INCLUDES	:=


LITTLE_VERSION = 6

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------

CFLAGS		=	-g -O2 -Wall $(MACHDEP) $(INCLUDE) -DTARGET_WII  -D__STATIC__ -DDISABLE_X11  -D__BGDI__ -D__BGDRTM__ -DVERSION=\"1.0.0\" -D__LITE__=$(LITTLE_VERSION) -Dmain=SDL_main
CXXFLAGS	=	$(CFLAGS)

LDFLAGS	=	-g $(MACHDEP) -Wl,-Map,$(notdir $@).map -lz -lpng -lSDL_mixer -logg -lvorbis -lvorbisidec  -lsmpeg -lstdc++ -L$(OSSL_INSTALL_DIR) -lcrypto -lSDLmain -lSDL 

#---------------------------------------------------------------------------------
# any extra libraries we wish to link with the project
#---------------------------------------------------------------------------------
LIBS	:=	-lwiiuse -lbte -logc -lm

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:=

#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
					$(foreach dir,$(DATA),$(CURDIR)/$(dir)) \
					$(foreach dir,$(TEXTURES),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

#---------------------------------------------------------------------------------
# automatically build a list of object files for our project
#---------------------------------------------------------------------------------
CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
sFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.S)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))
SCFFILES	:=	$(foreach dir,$(TEXTURES),$(notdir $(wildcard $(dir)/*.scf)))
TPLFILES	:=	$(SCFFILES:.scf=.tpl)

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
	export LD	:=	$(CC)
else
	export LD	:=	$(CXX)
endif

export OFILES	:=	$(addsuffix .o,$(BINFILES)) \
					$(addsuffix .o,$(TPLFILES)) \
					$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) \
					$(sFILES:.s=.o) $(SFILES:.S=.o)

#---------------------------------------------------------------------------------
# build a list of include paths
#---------------------------------------------------------------------------------
export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
					$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
					-I$(CURDIR)/$(BUILD) \
					-I$(LIBOGC_INC)

#---------------------------------------------------------------------------------
# build a list of library paths
#---------------------------------------------------------------------------------
export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib) \
					-L$(LIBOGC_LIB)

export OUTPUT	:=	$(CURDIR)/$(TARGET)
.PHONY: $(BUILD) clean

#---------------------------------------------------------------------------------
$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.wii_bgdi

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(OUTPUT).elf $(OUTPUT).dol
#---------------------------------------------------------------------------------
run:
	wiiload $(OUTPUT).dol

#---------------------------------------------------------------------------------
else

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
$(OUTPUT).dol: $(OUTPUT).elf
$(OUTPUT).elf: $(OFILES)

#---------------------------------------------------------------------------------
%.tpl.o	:	%.tpl
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)


-include $(DEPSDIR)/*.d

#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------
BUILD_DIR = $(BUILD)
create_links:
	mkdir -p $(BUILD_DIR)/src
	mcopy -n *.c $(BUILD_DIR)/src/ 
	mcopy -n *.h $(BUILD_DIR)/src/ 
	find ../core/bgdrtm/ -name "*.h" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../core/bgdrtm/ -name "*.c" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../core/bgdi/ -name "*.h" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../core/bgdi/ -name "*.c" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../core/common/ -name "*.c" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../core/common/ -name "*.h" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../core/include/ -name "*.h" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../modules/ -name "*.c" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	find ../modules/ -name "*.h" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	#find ../core/bgdc/ -name "*.h" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	#find ../core/bgdc/ -name "*.c" -exec ln -s ../../{} $(BUILD_DIR)/src/ \;
	#ln -s ../../../core/bgdc/src/strings.c $(BUILD_DIR)/src/strings_bgdc.c
	#ln -s ../../../core/bgdc/src/main.c $(BUILD_DIR)/src/main_bgdc.c
